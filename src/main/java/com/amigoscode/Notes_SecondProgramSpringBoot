package com.amigoscode;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


@SpringBootApplication
@RestController
public class Main {

    //db
    private static List<Customer> customers;

    static {
        customers = new ArrayList<>();
        Customer alex = new Customer(1,"Alex","alex@gmail.com", 21 );
        customers.add(alex);

        Customer Jamila = new Customer(2,"Jamila","Jamila@gmail.com", 19 );
        customers.add(Jamila);

    }
    public static void main(String[] args) {
        SpringApplication.run(Main.class, args);
    }

    //First endpoint
    /*
    the same than GetMapping
    @RequestMapping(path = "api/v1/customer", method = RequestMethod.GET)
     */
    @GetMapping("api/v1/customers")
    public List<Customer> getCustomers(){
        return customers;
    }

    //Second endpoint
    //@GetMapping("api/v1/customers/{id}") //the {id} allows us to search by id in the endpoint. @PATHVARIABLE
//    @GetMapping("api/v1/customers/{customerId}")
//    public Customer getCustomer(@PathVariable("customerId") Integer customerId){
//        Customer customer = customers.stream()
//                .filter(c -> c.id.equals(customerId))
//                .findFirst().orElseThrow(() -> new IllegalArgumentException(String.format("customer with [%s] not found", customerId)
//                        .formatted(customerId)));
//        return customer;
//    }
    @GetMapping("api/v1/customers/{customerId}")
    public Customer getCustomer(@PathVariable("customerId") Integer customerId){
        Customer customer = customers.stream()
                .filter(c -> c.getId() == customerId)
                .findFirst()
                .orElseThrow(() -> new IllegalArgumentException(String.format("Customer with id [%d] not found", customerId)));
        return customer;
    }


    //clase
    static class Customer {
        private int id;
        private String name;
        private String email;
        private int age;

        public Customer(){}

        public Customer(int id, String name, String email, int age) {
            this.id = id;
            this.name = name;
            this.email = email;
            this.age = age;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public int getAge() {
            return age;
        }

        public void setAge(int age) {
            this.age = age;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Customer customer = (Customer) o;
            return id == customer.id && age == customer.age && Objects.equals(name, customer.name) && Objects.equals(email, customer.email);
        }

        @Override
        public int hashCode() {
            return Objects.hash(id, name, email, age);
        }

        @Override
        public String toString() {
            return "Customer{" +
                    "id=" + id +
                    ", name='" + name + '\'' +
                    ", email='" + email + '\'' +
                    ", age=" + age +
                    '}';
        }
    }

}
